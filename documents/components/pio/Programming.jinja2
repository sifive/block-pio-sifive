{%  set registers = RegisterMap(scope) %}

[[chapter-pio]]
= Parallel I/O (PIO)

This chapter describes the operation of the SiFive Parallel I/O peripheral.

== PIO Overview

The PIO peripheral provides a simple parallel data connection.
It supports up to 32 lines of input (`pin`) and output (`pout`).
It does not support flow control,
but it does provide a full set of `penable` lines for latching the input.

{{ Figure("{here}/pio_diagram.svg", title="PIO Block Diagram", id="pio-diagram", width="50%", **kwargs) }}

== PIO Instances in {{  product_name }}
{{ product_name }} contains {{ devices|length|english_number }} PIO instance{{ devices|pluralize('s') }}.
{{ devices|pluralize('Its address,Their addresses') }} and data width are shown below in <<pio_instance_table>>.

{{ Section(".InstanceTable", scope, reference_id="pio_instance_table", **kwargs) }}


== PIO Registers
The register map for the PIO control registers is shown in <<table_pio_register_map>>.
The PIO device is designed to work with naturally aligned 32-bit memory accesses.

{{ registers.table("PIO Register Map", "table_pio_register_map") }}


== PIO Output Register (`ODATA`)
{{ registers.fields("ODATA") }}


== PIO Input Enable Register (`OENABLE`)
{{ registers.fields("OENABLE") }}


== PIO Input Register (`IDATA`)
{{ registers.fields("IDATA") }}
