def project = simplify "{here}/.."

# Notify others we are providing documentation.
publish docDirectory =  project, Nil

###########################################################
# Given a DUT, build the rtl and create an onboarding docuement
#############################################################
global def makeOnboardDocument dut =

    # Generate RTL and get the list of output files
    def rtl = dut.makeRTL | debug "rtl output"
    def outputs = rtl.getDUTSources

    # Get the product name
    def name = rtl.getDUTName

    # Get path to the object model file
    def om = matchPath `.*objectModel\.json` outputs
    def srams = matchPath `.*behav_srams.*\.conf` outputs

    buildOnboardDocument name om  "build/api-generator-sifive/{name}/documents"


##################################################################
# Given an object model, builds an onboarding document
##################################################################
global def buildOnboardDocument name om outputDir =

    # Create the output directory
    def outputPath = mkdir outputDir

    def visible = (om, outputPath, Nil)

    def args =
        "--output", "{outputDir}/{name}.adoc", "{outputDir}/{name}.www",
        "--sections", "document.Onboarding",
        "--values", "product_name={name} Test Harness",
        "--design", om.getPathName,
        "--simple",
        Nil

    # Build the document, returning a list of paths.
    buildDocument args visible


# Find some path in the list which matches the regular expression
def matchPath pattern pathList =
    def somePath = pathList | filter (matches pattern _.getPathName) | head
    somePath | getOrElse  (makeBadPath (makeError "Couldn't find output file"))
